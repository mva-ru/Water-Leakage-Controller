#ifndef HAL_MY_ADC_H
#define HAL_MY_ADC_H

#include "stm32f1xx_hal.h"
#include "stm32f1xx_hal_adc.h"
#include "hal_types.h"

/*************************************************************************
									Модуль обработки данных с каналов АЦП 
**************************************************************************
	Измеряет:
					 1. vbat - напряжение батареи RTC;
					 2. pbat - напряжение батареи резервного питания.
-------------------------------------------------------------------------*/

//-----------------------------------------------------------------------
#define ADC_K_CHANLES 	(u8)2					// Кол-во каналов, на которых будут производиться измерения

#define ADC_IDX_VBAT  	(u8)0					// Индекс массива с данными АЦП для темп. контроллера
#define ADC_IDX_PBAT		(u8)1					// Индекс массива с данными АЦП для напряжения питания

#define ADC_VBAT_L			 1.90f				// Нижняя граница напряжения батареи RTC
#define ADC_VBAT_H			 3.20f				// Верхняя граница напряжения батареи RTC
#define ADC_PBAT_L			 10.50f				// Нижняя граница напряжения батареи резервного питания
#define ADC_PBAT_H			 12.45f				// Верхняя граница напряжения батареи резервного питания

//-----------------------------------------------------------------------
volatile typedef enum 								// состояние работы канала
{
	ADC_CH_ERR_NOT = 0U,								// нет ошибок
	ADC_CH_ERR_BREAK,										// обрыв
	ADC_CH_ERR_SHORT_CIRCUIT,						// короткое на входе
	ADC_CH_ERR_OUT_OF_RANGE,						// выход значений за диапазон измерения
} ADC_Ch_Err;	

volatile typedef struct 																	
{	
	ADC_HandleTypeDef* hadc;						// Ссылка на структуру АЦП, с которой будем работать
	
	u8   fl_start;											// Флаг - запросить обработку данных с АЦП (взводим по счетчику)
	u8   fl_save;												// Флаг - сохранить измерения с АЦП (сложение значений в буфере, для последующего осреднения)
	u8   fl_handl;											// Флаг - идет анализ полученных данных с АЦП
	u8   fl_end;												// Флаг - был произведен цикл измерений с АЦП и их осреднение
	
	u16  cnt;														// Счетчик интервала опроса серии измерений каналов АЦП
	u16  cnt_max;												// Макс. значение счетчика (мс)
	
	u16  ncnt;													// Счетчик кол-ва измерений каналов АЦП
	u16  ncnt_max;											// Макс. кол-во
	
	u32  buf_data_e[ADC_K_CHANLES];			// Буфер для хранения последних оцифрованных значений от 2 каналов АЦП
	u64  buf_data_ms[ADC_K_CHANLES];		// Сумматоры данных с 2 каналов АЦП
	u16  buf_data_c[ADC_K_CHANLES];			// Последние рассчитанные данные с 2 каналов АЦП
	
	float		   vbat;										// Напряжение батареи RTC
	float			 pbat;										// Напряжение батареи резервного питания
	float		   vbat_cal;								// Калибровочное значение напряжения батареи RTC
	float			 pbat_cal;								// Калибровочное значение напряжения батареи резервного питания
	float		 	 vbat_per;								// Напряжение батареи RTC в процентах
	float			 pbat_per;								// Напряжение батареи резервного питания в процентах
	ADC_Ch_Err vbat_state;							// Cостояние канала АЦП - vbat
	ADC_Ch_Err pbat_state;							// Cостояние канала АЦП - pbat
} ADC_Struct;

/************************************************************************
									Прототипы глобальных переменных
*************************************************************************/
extern ADC_Struct ADC_obj;																				
//-----------------------------------------------------------------------	

/************************************************************************
								Прототипы глобальных функций модуля
*************************************************************************/
void  ADC_Init(ADC_HandleTypeDef* hadc);																	// Инициализация модуля АЦП (положить main)
void  ADC_Handler(void);																									// Обработчик данных полученных с АЦП (положить main)
void  ADC_Handler_Tm(void); 																							// Управление перезапросом новых измерений каналов АЦП (положить в таймер 1мс)
//------------------------------------------------------------------------

#endif
