#ifndef HAL_MODBUS_SLAVE_H
#define HAL_MODBUS_SLAVE_H

#include "stm32f1xx_hal.h"
#include "hal_types.h"

#define ASCII_ID 0x000100												// Идентификатор (00), версия (01) и сборка (00) устройства

/*
	---------------------------------------------------------------------------------------------------------------------------------
	Код	Название											Описание
	---------------------------------------------------------------------------------------------------------------------------------
	01	ILLEGAL FUNCTION							Функция в принятом сообщении не поддерживается на данном SL. Если тип запроса – POLL PROGRAM COMPLETE, этот код указывает, что предварительный запрос не был командой программирования.
	02	ILLEGAL DATA ADDRESS					Адрес, указанный в поле данных, является недопустимым для данного SL.
	03	ILLEGAL DATA VALUE						Значения в поле данных недопустимы для данного SL.
	04	FAILURE IN ASSOCIATED 				DEVICE	SL не может ответить на запрос или произошла авария.
	05	ACKNOWLEDGE										SL принял запрос и начал выполнять долговременную операцию программирования. Для определения момента завершения операции используйте запрос типа POLL PROGRAM COMPLETE. Если этот запрос был послан до завершения операции программирования, то SL ответит сообщением REJECTED MESSAGE.
	06	BUSY, REJECTED MESSAGE				Сообщение было принято без ошибок, но SL в данный момент выполняет долговременную операцию программирования. Запрос необходимо ретранслировать позднее.
	07	NAK-NEGATIVE ACKNOWLEDGMENT		Функция программирования не может быть выполнена. Используйте опрос для получения детальной аппаратно-зависимой информации об ошибке.
	08	ERROR CRC16										Ошибка контрольной суммы в принятом пакете.
	---------------------------------------------------------------------------------------------------------------------------------
*/

volatile typedef enum														// Тип данных - ошибки при ретрансляции пакета от mastera
{
	ASCII_ERR_RETX_NONE  	= 0x00,									// нет ошибок
	ASCII_ERR_RETX_OFF 	 	= 0x01,									// порт по которому пришел запрос не задействован (выкл.)
	ASCII_ERR_RETX_PRTKL 	= 0x02,									// на запрашиваемом порту другой протокол работы 
	ASCII_ERR_RETX_MODE  	= 0x03,									// режим работы порта не позволяет сделать запрос 
	ASCII_ERR_RETX_ID		  = 0x04,									// на порту не сконфигурирован опрос запрошенного устр-ва 
	ASCII_ERR_RETX_REG 	 	= 0x05,									// нет такого регистра в карте памяти запрашиваемого устр-ва
	ASCII_ERR_RETX_NPU 	 	= 0x06,									// задан неверный номер порта в запросе
	ASCII_ERR_RETX_ADR 	 	= 0x07,									// неверный адрес устр-ва в запросе (выходит за диапазон допустимых значений)
	ASCII_ERR_RETX_N0_DEV = 0x08,									// нет устр-ва с таким адресом, на запрашиваемом порту
	ASCII_ERR_RETX_END 	 	= 0xFF											
} ASCII_ErrReTx;

volatile typedef enum														// Тип данных - статус ретрансляции пакета от mastera к slave и обратно
{
	ASCII_STAT_RETX_NONE = 0x00,									// ретрансляции пакета не запрошена
	ASCII_STAT_RETX_RX,														// пришел пакет для ретрансляции
	ASCII_STAT_RETX_TX_S,													// перенаправили запрос slave устр-ву, через master порт
	ASCII_STAT_RETX_TMO_RX,												// истек тайм-аут ответа от slave
	ASCII_STAT_RETX_TX_M,													// перенаправили ответ master
	ASCII_STAT_RETX_END  = 0xFF								
} ASCII_StatReTx;

volatile typedef enum														// Тип данных - номера портов (доступ к регистрам карты памяти)
{
	ASCII_PORT_1 = 0x01,														
	ASCII_PORT_2 = 0x02,														
	ASCII_PORT_3 = 0x04,														
	ASCII_PORT_4 = 0x08,														
	ASCII_PORT_5 = 0x10,	
	ASCII_PORT_6 = 0x20,	
	ASCII_PORT_7 = 0x40,
	ASCII_PORT_ALL = 0xFF
} ASCII_MbsPorts;

volatile typedef enum														// Тип данных - статусы сохранения параметра в память
{
	ASCII_READ  = 0x00,
	ASCII_WRITE = 0x01,
	ASCII_RW 		= 0x02		
} ASCII_MbsRw;

volatile typedef struct 									   		// Cтруктура карты модбас
{																		
  u16  num_reg;						     									// номер регистра
  u16* point_val;	             									// указатель на массив-регистр
  u8   size;				            								// длина переменной в байтах

  ASCII_MbsRw flagRW;				          					// статус чтение\запись регистра
	u8   nRs;																			// номер порта, который имеет доступ к регистру

	u16  valOf;																		// диапазон разрешаемых значений на запись в регистр от valOf.	
	u16  valTo;																		// диапазон разрешаемых значений на запись в регистр до valTo.
	u8   fl_byte:1;																// флаг - однобайтная переменная (0- 2 байта; 1 - 1 байт)
} ASCII_MapObj;	

volatile typedef union 
{
	struct 
	{
		u8 _0_cfg_err_write:1;											// Модуль конф-я. Ошибка записи конф-и в EEPROM
		u8 _1_cfg_err_read:1;											  // Модуль конф-я. Ошибка чтения конф-и из EEPROM
		u8 _2_cfg_err_crc_prm_read:1;								// Модуль конф-я. Ошибка при чтении конф-и из EEPROM - у одного из пакетов не совпадает CRC
		u8 _3_eeprom_disable:1;											// EEPROM не отвечает (неподключена, неисправна, зависание шины)
		u8 _4_mg_stack_full:1;											// Переполнение стека журнала
		u8 _5:1;
		u8 _6:1;
		u8 _7:1;
		u8 _8:1;
		u8 _9:1;
		u8 _10:1;
		u8 _11:1;
		u8 _12:1;
		u8 _13:1;
		u8 _14:1;
		u8 _15:1;
	} bit;
	u16 full;																			// соединенные 16 бит
} ASCII_StatRegBits;

/************************************************************************
											Прототипы глобальных переменных
*************************************************************************/
extern ASCII_StatRegBits ASCII_Regs_Status_Cpu;			 				 							// регистр - ошибок контроллера
extern u16 						   ASCII_Regs_Jump_BootLdr;			 				 						// регистр - флаг перейти в загрузчик
extern u16 						   ASCII_Regs_Restart_Cpu;			 			 	 		 				// регистр - флаг перезагрузка контроллера

//-----------------------------------------------------------------------	

/************************************************************************
										Прототипы глобальных функций модуля
*************************************************************************/
void ASCII_Init(void);																										// Инициализация модуля (положить main)
void ASCII_Handler(void);																									// Обработчик операций с интерфейсными устройствами (положить в port manager)

void ASCII_Analiz_Pack_Slave(u8* bufRx, u8* bufTx, u8 n_bytes, u8 n_port);// Анализ полученного пакета и определение функции
//-----------------------------------------------------------------------			

#endif
