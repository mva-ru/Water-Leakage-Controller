#ifndef HAL_ALGORITHM_H
#define HAL_ALGORITHM_H

#include "stm32f1xx_hal.h"
#include "hal_types.h"	

#define ALG_MAX_DEV					6		// макс. кол-во радиодатчиков
#define ALG_RF_S_ON		 0x0001		// включить указанные радиодатчики (активация по битам, от мл. к ст.)

#define ALG_TM_DIAG			10000		// время ожидания ответа для диагностики связи радиодатчика

#define ALG_VBAT_L			 3.50		// Нижняя граница напряжения батареи радиодатчика (полный разряд)
#define ALG_VBAT_H			 4.15		// Верхняя граница напряжения батареи радиодатчика (полный заряд)

#define ALG_VALVE_OPEN	 true
#define ALG_VALVE_CLOZE	 false

volatile typedef struct
{
	S_Word_Bits	rf_s_on;					// набор битов - вкл. в алгоритм радиодатчики (1-вкл., 0-нет)
	S_Word_Bits	rf_s_stat;				// набор битов - срабатывания радиодатчиков(1-мокро, 0-сухо)
	S_Word_Bits	rf_s_rx_ok;				// набор битов - приняли новые данные от радиодатчиков(1-да, 0-нет)
	S_Word_Bits	rf_s_diag;				// набор битов - диагностики радиодатчиков (1-потеря связи, 0-на связи)
	S_Word_Bits	rf_s_diag_s;			// набор битов - начать отсчет времени ALG_TM_DIAG для диагностики связи радиодатчика
	
	u16					rf_s_cnt_tm_diag[ALG_MAX_DEV];// счетчики ожидания ответа для диагностики связи радиодатчиков
	u16					rf_s_cnt_diag[ALG_MAX_DEV];		// счетчики потери связи с радиодатчиками
	
	u8					rf_s_bat_charge[ALG_MAX_DEV];	// значение заряда батареи в % для каждого радиодатчика
	float				rf_s_bat_voltage[ALG_MAX_DEV];// значение напряжения батареи в % для каждого радиодатчика
	
	// Для защиты от закисания клапанов
	u8							n_off;				// Кол-во циклов (выкл. + вкл. = 1 цикл)
	u8							n_min_off;		// На какое время выкл. клапан (мин.)	
	RTC_TimeTypeDef valve_tm_turn;// Bремя срабатывания выкл. клапанов	
	bool 						fl_state_vl;  // текущее сост-е клапана
	
}ALG_Struct;	// Структура основного алгоритма

/************************************************************************
											Прототипы глобальных переменных
*************************************************************************/
extern ALG_Struct ALG_obj;																								// Объект для работы с параметрами алгоритма
//-----------------------------------------------------------------------	

/************************************************************************
										Прототипы глобальных функций модуля
*************************************************************************/
void ALG_Init(void);																											// Инициализация модуля модуля 
void ALG_Handler(void);		 																								// Обработчик модуля (положить в Main)
void ALG_Handler_Tm(void);																								// Обработчик интервалов для модуля (положить в таймер 1мс)
//------------------------------------------------------------------------

#endif
