#ifndef HAL_BUTTONS_H
#define HAL_BUTTONS_H

#include "stm32f1xx_hal.h"
#include "hal_types.h"

//***************************************************************************
//									Модуль обработки нажатия клавиатуры
//***************************************************************************
/* Возможности:
		1. Настройка логических уровней срабатывания
		2. Фильтр для устранения дребезга
		3. Определение разных состояний клавиш (нажатие\отжатие\удержание)
*/
//---------------------------------------------------------------------------
#define BTN_OBJ_MAX			3																		// кол-во клавиш
#define BTN_LEV_MAX			2																		// Макс. кол-во переходов уровней (размер массива)

#define BTN_PORT_ON 		GPIOB																//*****!!Внести изменения!!******
#define BTN_PIN_ON 	 		GPIO_PIN_5													//*****!!Внести изменения!!******

#define BTN_PORT_OFF 		GPIOB																//*****!!Внести изменения!!******
#define BTN_PIN_OFF 	 	GPIO_PIN_4													//*****!!Внести изменения!!******

#define BTN_PORT_MUTE 	GPIOB																//*****!!Внести изменения!!******
#define BTN_PIN_MUTE 		GPIO_PIN_3													//*****!!Внести изменения!!******

volatile typedef enum
{
	BTN_NAME_NO = 0x00U,																			// неопределено
	BTN_NAME_ON,																							// открыть клапан
	BTN_NAME_OFF,																							// закрыть клапан
	BTN_NAME_MUTE,																						// управление звуковым оповещением	
} BTN_eName;																								// Тип данных - назначение клавиш

volatile typedef enum
{
	BTN_RSTAT_INIT = 0x00U,
	BTN_RSTAT_DEPRESS_0,																			// отжато (уровень 0)
	BTN_RSTAT_DEPRESS_1,																			// отжато (уровень 1)
	BTN_RSTAT_PRESS_0_1,																			// нажато (переход уровней 01)
	BTN_RSTAT_PRESS_1_0,																			// нажато (переход уровней 10)
	BTN_RSTAT_PRESS_0_1_0,																		// нажато-отжато(переход уровней 01)
	BTN_RSTAT_PRESS_1_0_1,																		// нажато-отжато(переход уровней 10)
	BTN_RSTAT_HOLD_1,																					// идет удержание активного уровня - 1
	BTN_RSTAT_HOLD_0,																					// идет удержание активного уровня - 0
	BTN_RSTAT_HOLD_1_3s,																			// удержание активного уровня 3с (уровень 0)
	BTN_RSTAT_HOLD_0_3s,																			// удержание активного уровня 3с (уровень 1)	
} BTN_eRState;																							// Тип данных - расширенное состояние клавиши

volatile typedef struct 									 
{	
	BTN_eName				name;																			// назначение клавиш				
	
	bool            level_a;																	// флаг - активный уровень срабатывания (true - 1; false - 0)
	bool            level_now;																// флаг - текущий уровень (true - 1; false - 0)
	bool            level_last;																// флаг - прошлый уровень (true - 1; false - 0)

	bool            block_i;																	// флаг - блок инкримента элемента массива логических состояний
	bool						fl_hold_3s_r;															// флаг - было удержание 3с, но отжатия не было
	bool 						stat_sav_work1;														// флаг - сохранение статуса срабатывания, 1 лог-ий переход (true - сработало; false - нет), для анализа и последующего сброса
	bool 						stat_sav_work2;														// флаг - сохранение статуса срабатывания, 2 лог-их перехода (true - сработало; false - нет), для анализа и последующего сброса
	bool 						stat_sav_hold_3s;													// флаг - сохранение статуса срабатывания удержания (true - сработало; false - нет), для анализа и последующего сброса	
	BTN_eRState			stat_r_sav;																// удержание расширенного состояния (сбрасывается вручную)
	
	bool						buf_l[BTN_LEV_MAX];												// флаги -  переходы уровней (за заданный промежуток времени, для устранения дребезга)
	u8 				 			cnt_l;																		// счетчик для записи в данных buf_l
	
	u16 				 		cnt_t;																		// счетчик - через сколько опросить состояние входа, (мс)
	u16     	 			cnt_t_m;																	// макс. значение, (мс)
	u8 		  				cnt_d;																		// счетчик - устранение дребезга (временной фильтр), кратно cnt_t
	u8     	 				cnt_d_m;																	// макс. значение, кратно cnt_t
	u16 		  			cnt_dr;																		// счетчик - удержание состояния срабатывания, кратно cnt_d
	u16     	 			cnt_dr_m;																	// макс. значение, кратно cnt_d
	
	u16 					  pin;																			// номер контакта	
	GPIO_TypeDef* 	gpio;																			// ссылка на порт
	GPIO_PinState (*Read_Stat)(GPIO_TypeDef* gpio, u16 pin);	// ссылка на метод - чтение статуса контакта
} BTN_sObj; 									  														// Cтруктура - параметры подкл-го устр-ва

/************************************************************************
								Прототипы глобальных переменных модуля
*************************************************************************/
extern BTN_sObj BTN_Obj[BTN_OBJ_MAX];																			// Массив с параметрами для каждой клавиши
//-----------------------------------------------------------------------

/************************************************************************
									Прототипы глобальных функций модуля
*************************************************************************/
void BTN_Init(void);																											// Инициализация модуля
void BTN_Handler_Tm(void);																								// Обработчик операций в таймере (положить в таймер 1мс)
//-----------------------------------------------------------------------

#endif
